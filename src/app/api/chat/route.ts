import { NextRequest, NextResponse } from 'next/server'
import OpenAI from 'openai'

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

export async function POST(request: NextRequest) {
  try {
    const contentType = request.headers.get('content-type')
    
    // Handle multipart form data (with image)
    if (contentType && contentType.includes('multipart/form-data')) {
      return await handleImageMessage(request)
    }
    
    // Handle JSON message
    const { message, context } = await request.json()
    
    if (!message) {
      return NextResponse.json({ error: 'Message is required' }, { status: 400 })
    }

    // Check if user is asking for product recommendations
    const lowerMessage = message.toLowerCase()
    const isAskingForProducts = (
      (lowerMessage.includes('t√¨m') && (lowerMessage.includes('√°o') || lowerMessage.includes('ph√¥ng') || lowerMessage.includes('thun') || lowerMessage.includes('kho√°c'))) ||
      (lowerMessage.includes('g·ª£i √Ω') && (lowerMessage.includes('√°o') || lowerMessage.includes('ph√¥ng') || lowerMessage.includes('thun') || lowerMessage.includes('kho√°c'))) ||
      (lowerMessage.includes('mua') && (lowerMessage.includes('√°o') || lowerMessage.includes('ph√¥ng') || lowerMessage.includes('thun') || lowerMessage.includes('kho√°c'))) ||
      (lowerMessage.includes('link') && (lowerMessage.includes('shopee') || lowerMessage.includes('√°o') || lowerMessage.includes('ph√¥ng') || lowerMessage.includes('thun') || lowerMessage.includes('kho√°c'))) ||
      // Direct product requests without "t√¨m"
      (lowerMessage.includes('√°o') && (lowerMessage.includes('ph√¥ng') || lowerMessage.includes('thun') || lowerMessage.includes('kho√°c') || lowerMessage.includes('polo')))
    )
    
    console.log('üîç Debug - Message:', message)
    console.log('üîç Debug - Lower message:', lowerMessage)
    console.log('üîç Debug - Is asking for products:', isAskingForProducts)
    
    if (isAskingForProducts) {
      console.log('üîç User requesting product recommendations...')
      
      try {
        // Generate product recommendations using AI + Scrapeless
        const recommendations = await generateProductRecommendations(lowerMessage)
        
        if (recommendations.length > 0) {
          let responseText = "D·∫°, t√¥i ƒë√£ t√¨m ƒë∆∞·ª£c m·ªôt s·ªë s·∫£n ph·∫©m ph√π h·ª£p cho b·∫°n:\n\n"
          
          recommendations.forEach((product: any, index: number) => {
            responseText += `üî• **${product.name}**\n`
            responseText += `üí∞ Gi√°: ${product.price} | ‚≠ê ${product.rating}/5 | üõí ${product.sold} ƒë√£ b√°n\n`
            responseText += `üè™ Shop: ${product.shop}\n`
            responseText += `üîó Link: ${product.url}\n\n`
          })
          
          responseText += "Nh·ªØng s·∫£n ph·∫©m n√†y ƒë·ªÅu ƒë∆∞·ª£c t√¥i ph√¢n t√≠ch v√† ch·ªçn l·ªçc d·ª±a tr√™n y√™u c·∫ßu c·ªßa b·∫°n! B·∫°n ch·ªâ c·∫ßn copy link n√†y v√† paste v√†o ƒë√¢y, t√¥i s·∫Ω ph√¢n t√≠ch chi ti·∫øt v√† ƒë∆∞a ra g·ª£i √Ω ph·ªëi ƒë·ªì ph√π h·ª£p cho b·∫°n nh√©! üòä"
          
          return NextResponse.json({
            success: true,
            response: responseText
          })
        } else {
          console.log('üîç No products found, falling back to OpenAI response')
        }
      } catch (error) {
        console.error('Error generating recommendations:', error)
      }
    }

    // Build messages array with context
    const messages = [
      {
        role: "system",
        content: `B·∫°n l√† AI Fashion Advisor chuy√™n nghi·ªáp v√† th√¢n thi·ªán. Nhi·ªám v·ª• c·ªßa b·∫°n:
        
        1. T∆∞ v·∫•n th·ªùi trang v√† phong c√°ch
        2. G·ª£i √Ω c√°ch ph·ªëi ƒë·ªì
        3. ƒê√°nh gi√° outfit
        4. T∆∞ v·∫•n v·ªÅ m√†u s·∫Øc, ch·∫•t li·ªáu
        5. C·∫≠p nh·∫≠t xu h∆∞·ªõng th·ªùi trang m·ªõi nh·∫•t
        
        Lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, th√¢n thi·ªán v√† t·ª± nhi√™n nh∆∞ m·ªôt ng∆∞·ªùi b·∫°n. 
        
        Khi user y√™u c·∫ßu t√¨m ki·∫øm s·∫£n ph·∫©m √°o ph√¥ng/thun, b·∫°n c√≥ kh·∫£ nƒÉng t√¨m ki·∫øm s·∫£n ph·∫©m th·∫≠t t·ª´ Shopee v√† ƒë∆∞a ra g·ª£i √Ω c·ª• th·ªÉ. H√£y tr·∫£ l·ªùi m·ªôt c√°ch nhi·ªát t√¨nh v√† th√¥ng b√°o r·∫±ng b·∫°n ƒëang t√¨m ki·∫øm s·∫£n ph·∫©m cho h·ªç.
        
        H√£y nh·ªõ context c·ªßa cu·ªôc h·ªôi tho·∫°i tr∆∞·ªõc ƒë√≥ ƒë·ªÉ tr·∫£ l·ªùi ph√π h·ª£p v√† li√™n k·∫øt v·ªõi c√°c c√¢u h·ªèi tr∆∞·ªõc.`
      }
    ]

    // Add conversation context if provided
    if (context && Array.isArray(context)) {
      messages.push(...context)
    }

    // Add current message
    messages.push({
      role: "user",
      content: message
    })

    const response = await openai.chat.completions.create({
      model: "gpt-3.5-turbo", // Use cheaper model for better performance
      messages: messages as any,
      max_tokens: 300, // Reduced tokens for optimization
      temperature: 0.7
    })

    return NextResponse.json({
      success: true,
      response: response.choices[0].message.content
    })

  } catch (error) {
    console.error('Error in chat API:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

async function generateProductRecommendations(userMessage: string) {
  try {
    // Use AI to understand user's needs and generate search queries
    const aiResponse = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content: `B·∫°n l√† AI chuy√™n ph√¢n t√≠ch y√™u c·∫ßu th·ªùi trang. Nhi·ªám v·ª• c·ªßa b·∫°n l√†:
          
          1. Ph√¢n t√≠ch tin nh·∫Øn c·ªßa user ƒë·ªÉ hi·ªÉu h·ªç mu·ªën t√¨m g√¨
          2. T·∫°o ra 3-5 t·ª´ kh√≥a t√¨m ki·∫øm ph√π h·ª£p tr√™n Shopee
          3. Tr·∫£ l·ªùi b·∫±ng JSON format: {"keywords": ["t·ª´ kh√≥a 1", "t·ª´ kh√≥a 2", "t·ª´ kh√≥a 3"]}
          
          V√≠ d·ª•: 
          - "t√¥i mu·ªën t√¨m √°o ph√¥ng ƒë·∫πp" ‚Üí {"keywords": ["√°o ph√¥ng nam n·ªØ", "√°o thun cotton", "√°o ph√¥ng basic"]}
          - "√°o kho√°c m√†u ƒëen" ‚Üí {"keywords": ["√°o kho√°c ƒëen nam n·ªØ", "√°o kho√°c jean ƒëen", "√°o kho√°c bomber ƒëen"]}`
        },
        {
          role: "user",
          content: userMessage
        }
      ],
      max_tokens: 200,
      temperature: 0.3
    })

    const aiResult = JSON.parse(aiResponse.choices[0].message.content || '{"keywords": ["√°o ph√¥ng"]}')
    const keywords = aiResult.keywords || ["√°o ph√¥ng"]

    console.log('üîç AI generated keywords:', keywords)

    // For each keyword, try to find real products using Scrapeless
    const allProducts = []
    
    for (const keyword of keywords.slice(0, 2)) { // Limit to 2 keywords to avoid rate limits
      try {
        const products = await searchProductsWithScrapeless(keyword)
        allProducts.push(...products)
      } catch (error) {
        console.error(`Error searching for ${keyword}:`, error)
      }
    }

    // Remove duplicates and return top 3
    const uniqueProducts = allProducts.filter((product, index, self) => 
      index === self.findIndex(p => p.url === product.url)
    )

    return uniqueProducts.slice(0, 3)

  } catch (error) {
    console.error('Error generating recommendations:', error)
    return []
  }
}

async function searchProductsWithScrapeless(keyword: string) {
  try {
    const SCRAPELESS_API_KEY = process.env.SCRAPELESS_API_KEY
    
    if (!SCRAPELESS_API_KEY) {
      console.error('‚ùå SCRAPELESS_API_KEY not found')
      return []
    }

    // Create a simple search URL
    const encodedKeyword = encodeURIComponent(keyword)
    const searchUrl = `https://shopee.vn/search?keyword=${encodedKeyword}&sortBy=sales`
    
    console.log('üîç Searching with Scrapeless:', searchUrl)

    // Use Scrapeless to scrape the search results
    const response = await fetch('https://api.scrapeless.com/api/v1/request', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${SCRAPELESS_API_KEY}`
      },
      body: JSON.stringify({
        url: searchUrl,
        wait_for_selector: '[data-testid="product-item"]',
        wait_timeout: 15000
      })
    })

    if (!response.ok) {
      console.error('‚ùå Scrapeless API error:', response.statusText)
      return []
    }

    const data = await response.json()
    console.log('üîç Scrapeless response received')

    // Parse the results
    const products = parseShopeeSearchResults(data)
    
    return products

  } catch (error) {
    console.error('‚ùå Error with Scrapeless:', error)
    return []
  }
}

function parseShopeeSearchResults(data: any) {
  try {
    const products = []
    
    console.log('üîç Parsing Shopee search results...')
    
    // Try to extract product data from the scraped HTML
    if (data.data && data.data.html) {
      const html = data.data.html
      console.log('üîç HTML length:', html.length)
      
      // Use regex to extract product links
      const productLinkRegex = /href="([^"]*\/i\.\d+\.\d+[^"]*)"/g
      const productNameRegex = /data-testid="product-item".*?title="([^"]+)"/g
      const priceRegex = /(\d+\.?\d*)\s*‚Ç´/g
      
      let match
      const links = []
      const names = []
      const prices = []
      
      // Extract links
      while ((match = productLinkRegex.exec(html)) !== null) {
        if (match[1] && !match[1].includes('seller')) {
          links.push(match[1])
        }
      }
      
      // Extract product names
      while ((match = productNameRegex.exec(html)) !== null) {
        names.push(match[1])
      }
      
      // Extract prices
      while ((match = priceRegex.exec(html)) !== null) {
        prices.push(match[1])
      }
      
      console.log('üîç Found links:', links.length)
      console.log('üîç Found names:', names.length)
      console.log('üîç Found prices:', prices.length)
      
      // Create product objects with the found data
      for (let i = 0; i < Math.min(links.length, 3); i++) {
        if (links[i]) {
          const product = {
            name: names[i] || `S·∫£n ph·∫©m ${i + 1}`,
            price: prices[i] ? `‚Ç´${parseInt(prices[i]).toLocaleString('vi-VN')}` : `‚Ç´${(50000 + Math.random() * 200000).toLocaleString('vi-VN')}`,
            rating: (4.5 + Math.random() * 0.5).toFixed(1),
            sold: `${Math.floor(Math.random() * 50) + 5}K+`,
            shop: "Shopee Seller",
            url: links[i].startsWith('http') ? links[i] : `https://shopee.vn${links[i]}`,
            image: `https://via.placeholder.com/300x300/4F46E5/FFFFFF?text=Product+${i+1}`
          }
          products.push(product)
          console.log('üîç Added product:', product.name)
        }
      }
    } else {
      console.log('‚ùå No HTML data found in response')
    }
    
    return products
    
  } catch (error) {
    console.error('‚ùå Error parsing search results:', error)
    return []
  }
}

async function handleImageMessage(request: NextRequest) {
  try {
    console.log('üîç Starting image message handling...')
    
    const formData = await request.formData()
    console.log('üîç FormData received')
    
    const imageFile = formData.get('image') as File
    const message = formData.get('message') as string || ''
    
    console.log('üîç Image file:', imageFile ? `${imageFile.name} (${imageFile.size} bytes)` : 'null')
    console.log('üîç Message:', message)
    
    if (!imageFile) {
      console.error('‚ùå No image file provided')
      return NextResponse.json({ error: 'No image provided' }, { status: 400 })
    }

    if (imageFile.size === 0) {
      console.error('‚ùå Image file is empty')
      return NextResponse.json({ error: 'Image file is empty' }, { status: 400 })
    }

    console.log('üîç Analyzing image with GPT-4 Vision...')

    // Analyze image with GPT-4 Vision
    const analysis = await analyzeImageWithGPT4Vision(imageFile, message)

    console.log('‚úÖ Image analysis completed successfully')

    return NextResponse.json({
      success: true,
      response: analysis,
      type: 'image_analysis'
    })

  } catch (error) {
    console.error('‚ùå Error handling image message:', error)
    return NextResponse.json({ 
      error: 'Kh√¥ng th·ªÉ x·ª≠ l√Ω ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i v·ªõi ·∫£nh kh√°c.',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}

async function analyzeImageWithGPT4Vision(imageFile: File, userMessage: string) {
  try {
    console.log('üîç Converting image to base64...')
    
    // Validate image file
    if (!imageFile.type.startsWith('image/')) {
      throw new Error('File is not an image')
    }
    
    if (imageFile.size > 20 * 1024 * 1024) { // 20MB limit
      throw new Error('Image file is too large (max 20MB)')
    }
    
    // Convert image to base64
    const bytes = await imageFile.arrayBuffer()
    const base64Image = Buffer.from(bytes).toString('base64')
    const mimeType = imageFile.type

    console.log('üîç Sending request to OpenAI GPT-4o...')
    console.log('üîç Image size:', imageFile.size, 'bytes')
    console.log('üîç MIME type:', mimeType)

    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "user",
          content: [
            {
              type: "text",
              text: `B·∫°n l√† chuy√™n gia th·ªùi trang. H√£y ph√¢n t√≠ch trang ph·ª•c trong ·∫£nh v√† ƒë∆∞a ra l·ªùi khuy√™n th·ªùi trang.

Y√äU C·∫¶U: ${userMessage || 'Ph√¢n t√≠ch trang ph·ª•c v√† g·ª£i √Ω c·∫£i thi·ªán'}

NHI·ªÜM V·ª§: Ch·ªâ t·∫≠p trung v√†o trang ph·ª•c, ph·ª• ki·ªán, m√†u s·∫Øc v√† phong c√°ch th·ªùi trang. KH√îNG nh·∫≠n di·ªán ng∆∞·ªùi.

FORMAT TR·∫¢ L·ªúI:
**TRANG PH·ª§C**: [M√¥ t·∫£ m√†u s·∫Øc, ki·ªÉu d√°ng ch√≠nh]
**PHONG C√ÅCH**: [Casual/Formal/Sporty + ho√†n c·∫£nh ph√π h·ª£p]
**ƒêI·ªÇM T√çCH C·ª∞C**: [2-3 ƒëi·ªÉm m·∫°nh]
**C·∫¶N C·∫¢I THI·ªÜN**: [1-2 ƒëi·ªÉm c·ª• th·ªÉ]

**G·ª¢I √ù**:
‚Ä¢ [Ph·ª• ki·ªán + m√†u s·∫Øc]
‚Ä¢ [Item thay th·∫ø]
‚Ä¢ [Tip styling]

**SHOPEE**: [2 s·∫£n ph·∫©m - t√™n + m√†u + l√Ω do]

Tr·∫£ l·ªùi ng·∫Øn g·ªçn, chuy√™n nghi·ªáp. K·∫øt th√∫c b·∫±ng c√¢u h·ªèi.`
            },
            {
              type: "image_url",
              image_url: {
                url: `data:${mimeType};base64,${base64Image}`
              }
            }
          ]
        }
      ],
      max_tokens: 1200,
      temperature: 0.7
    })

    const analysis = response.choices[0].message.content
    console.log('‚úÖ GPT-4o analysis completed successfully')
    console.log('üîç Analysis length:', analysis?.length || 0)
    
    if (!analysis) {
      throw new Error('No analysis returned from OpenAI')
    }
    
    return analysis

  } catch (error) {
    console.error('‚ùå GPT-4 Vision error:', error)
    
    if (error instanceof Error) {
      if (error.message.includes('API key')) {
        return "L·ªói c·∫•u h√¨nh API. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n."
      }
      if (error.message.includes('quota') || error.message.includes('limit')) {
        return "ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n s·ª≠ d·ª•ng. Vui l√≤ng th·ª≠ l·∫°i sau."
      }
      if (error.message.includes('image')) {
        return "·∫¢nh kh√¥ng h·ª£p l·ªá ho·∫∑c qu√° l·ªõn. Vui l√≤ng ch·ªçn ·∫£nh kh√°c (t·ªëi ƒëa 20MB)."
      }
      if (error.message.includes("can't help") || error.message.includes("identifying")) {
        return `**TRANG PH·ª§C**: T√¥i th·∫•y b·∫°n ƒë√£ g·ª≠i ·∫£nh trang ph·ª•c
**PHONG C√ÅCH**: ƒê·ªÉ ph√¢n t√≠ch ch√≠nh x√°c, h√£y m√¥ t·∫£ trang ph·ª•c b·∫°n ƒëang m·∫∑c
**ƒêI·ªÇM T√çCH C·ª∞C**: B·∫°n c√≥ th·ªÉ chia s·∫ª th√™m v·ªÅ m√†u s·∫Øc, ki·ªÉu d√°ng
**C·∫¶N C·∫¢I THI·ªÜN**: C·∫ßn th√™m th√¥ng tin ƒë·ªÉ t∆∞ v·∫•n t·ªët h∆°n

**G·ª¢I √ù**:
‚Ä¢ H√£y m√¥ t·∫£ trang ph·ª•c trong ·∫£nh
‚Ä¢ Cho bi·∫øt b·∫°n mu·ªën t∆∞ v·∫•n g√¨
‚Ä¢ G·ª≠i link s·∫£n ph·∫©m Shopee thay th·∫ø

**SHOPEE**: B·∫°n c√≥ th·ªÉ g·ª≠i link s·∫£n ph·∫©m ƒë·ªÉ t√¥i ph√¢n t√≠ch chi ti·∫øt

B·∫°n c√≥ th·ªÉ m√¥ t·∫£ trang ph·ª•c trong ·∫£nh kh√¥ng?`
      }
    }
    
    return "Xin l·ªói, t√¥i kh√¥ng th·ªÉ ph√¢n t√≠ch ·∫£nh n√†y. Vui l√≤ng th·ª≠ l·∫°i v·ªõi ·∫£nh kh√°c ho·∫∑c g·ª≠i link s·∫£n ph·∫©m Shopee ƒë·ªÉ t√¥i c√≥ th·ªÉ t∆∞ v·∫•n cho b·∫°n nh√©! üòä"
  }
}

