import { NextRequest, NextResponse } from 'next/server'
import OpenAI from 'openai'

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

export async function POST(request: NextRequest) {
  try {
    const formData = await request.formData()
    const imageFile = formData.get('image') as File
    
    if (!imageFile) {
      return NextResponse.json({ error: 'No image provided' }, { status: 400 })
    }

    console.log('üîç Analyzing uploaded image:', imageFile.name)

    // Convert image to base64
    const bytes = await imageFile.arrayBuffer()
    const base64Image = Buffer.from(bytes).toString('base64')
    const mimeType = imageFile.type

    // Analyze image with GPT-4 Vision
    const analysis = await analyzeImageWithGPT4Vision(base64Image, mimeType)

    return NextResponse.json({
      success: true,
      analysis: analysis
    })

  } catch (error) {
    console.error('Error analyzing image:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

async function analyzeImageWithGPT4Vision(base64Image: string, mimeType: string) {
  try {
    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "user",
          content: [
            {
              type: "text",
              text: `B·∫°n l√† chuy√™n gia th·ªùi trang AI. H√£y ph√¢n t√≠ch ·∫£nh n√†y v√† ƒë∆∞a ra ƒë√°nh gi√° chi ti·∫øt:

1. **M√î T·∫¢ NG∆Ø·ªúI/TRANG PH·ª§C**:
   - Gi·ªõi t√≠nh, tu·ªïi t√°c (∆∞·ªõc ƒëo√°n)
   - Trang ph·ª•c hi·ªán t·∫°i (√°o, qu·∫ßn, gi√†y, ph·ª• ki·ªán)
   - M√†u s·∫Øc ch·ªß ƒë·∫°o
   - Phong c√°ch th·ªùi trang

2. **ƒê√ÅNH GI√Å PHONG C√ÅCH**:
   - Phong c√°ch hi·ªán t·∫°i (casual, formal, sporty, trendy, etc.)
   - ƒêi·ªÉm m·∫°nh c·ªßa outfit
   - ƒêi·ªÉm c·∫ßn c·∫£i thi·ªán

3. **G·ª¢I √ù C·∫¢I THI·ªÜN**:
   - 3-5 g·ª£i √Ω c·ª• th·ªÉ ƒë·ªÉ n√¢ng c·∫•p phong c√°ch
   - M√†u s·∫Øc n√™n th√™m/b·ªõt
   - Ph·ª• ki·ªán ph√π h·ª£p
   - Ki·ªÉu d√°ng trang ph·ª•c n√™n thay ƒë·ªïi

4. **ƒê·ªÄ XU·∫§T S·∫¢N PH·∫®M**:
   - N·∫øu l√† ·∫£nh qu·∫ßn √°o: g·ª£i √Ω c√°ch ph·ªëi ƒë·ªì
   - N·∫øu l√† ·∫£nh ng∆∞·ªùi: ƒë·ªÅ xu·∫•t trang ph·ª•c ph√π h·ª£p

H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, th√¢n thi·ªán v√† chi ti·∫øt.`
            },
            {
              type: "image_url",
              image_url: {
                url: `data:${mimeType};base64,${base64Image}`
              }
            }
          ]
        }
      ],
      max_tokens: 1000,
      temperature: 0.7
    })

    const analysis = response.choices[0].message.content
    console.log('‚úÖ Image analysis completed')
    
    return analysis

  } catch (error) {
    console.error('‚ùå GPT-4 Vision error:', error)
    return "Xin l·ªói, t√¥i kh√¥ng th·ªÉ ph√¢n t√≠ch ·∫£nh n√†y. Vui l√≤ng th·ª≠ l·∫°i v·ªõi ·∫£nh kh√°c."
  }
}
