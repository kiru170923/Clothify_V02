import OpenAI from 'openai'

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

export interface ClothingDetectionResult {
  type: 'top' | 'bottom' | 'shoes' | 'accessory' | 'dress' | 'outerwear'
  category: string
  color: string
  style: string
  confidence: number
}

export async function detectClothingType(imageBase64: string): Promise<ClothingDetectionResult> {
  try {
    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "user",
          content: [
            {
              type: "text",
              text: `Ph√¢n t√≠ch TRANG PH·ª§C trong ·∫£nh v√† tr·∫£ v·ªÅ JSON v·ªõi th√¥ng tin sau:
              
              QUAN TR·ªåNG: Ph√¢n bi·ªát r√µ r√†ng c√°c lo·∫°i trang ph·ª•c:
              
              Lo·∫°i trang ph·ª•c CH√çNH X√ÅC:
              - "top": √Åo s∆° mi, √°o thun, √°o tank, √°o len, √°o hoodie, √°o blouse, √°o polo
              - "bottom": Qu·∫ßn jean, qu·∫ßn short, qu·∫ßn √¢u, qu·∫ßn jogger, qu·∫ßn t√¢y, qu·∫ßn kaki
              - "dress": ƒê·∫ßm, v√°y d√†i, jumpsuit, playsuit, v√°y li·ªÅn th√¢n
              - "shoes": Gi√†y sneaker, gi√†y cao g√≥t, sandal, boot, gi√†y t√¢y, gi√†y th·ªÉ thao
              - "accessory": T√∫i x√°ch, v√≠, m≈©, khƒÉn, th·∫Øt l∆∞ng, ƒë·ªìng h·ªì, nh·∫´n, d√¢y chuy·ªÅn
              - "outerwear": √Åo kho√°c, √°o vest, blazer, cardigan, √°o len d√†i tay
              
              Y√™u c·∫ßu:
              1. Ph√¢n lo·∫°i CH√çNH X√ÅC lo·∫°i trang ph·ª•c (kh√¥ng nh·∫ßm l·∫´n)
              2. X√°c ƒë·ªãnh m√†u s·∫Øc ch√≠nh
              3. ƒê√°nh gi√° phong c√°ch
              4. ƒê·ªô tin c·∫≠y (0-100)
              
              V√≠ d·ª• ph√¢n lo·∫°i:
              - ƒê√¥i gi√†y sneaker ‚Üí "shoes"
              - √Åo thun ‚Üí "top"
              - Qu·∫ßn jean ‚Üí "bottom"
              - T√∫i x√°ch ‚Üí "accessory"
              
              Tr·∫£ v·ªÅ JSON format:
              {
                "type": "lo·∫°i_trang_ph·ª•c_ch√≠nh_x√°c",
                "category": "danh_m·ª•c_c·ª•_th·ªÉ",
                "color": "m√†u_s·∫Øc_ch√≠nh",
                "style": "phong_c√°ch",
                "confidence": ƒë·ªô_tin_c·∫≠y
              }`
            },
            {
              type: "image_url",
              image_url: {
                url: imageBase64
              }
            }
          ]
        }
      ],
      max_tokens: 500,
      temperature: 0.1
    })

    const content = response.choices[0].message.content
    if (!content) {
      throw new Error('No response from OpenAI')
    }

    // Parse JSON response
    const jsonMatch = content.match(/\{[\s\S]*\}/)
    if (!jsonMatch) {
      throw new Error('No JSON found in response')
    }

    const result = JSON.parse(jsonMatch[0])
    
    // Validate result
    if (!result.type || !result.category || !result.color) {
      throw new Error('Invalid detection result')
    }

    return {
      type: result.type,
      category: result.category,
      color: result.color,
      style: result.style || 'casual',
      confidence: result.confidence || 85
    }

  } catch (error) {
    console.error('Clothing detection error:', error)
    
    // Fallback: return default detection
    return {
      type: 'top',
      category: 'unknown',
      color: 'unknown',
      style: 'casual',
      confidence: 50
    }
  }
}

export function getClothingIcon(type: string): string {
  const icons: Record<string, string> = {
    'top': 'üëï',
    'bottom': 'üëñ',
    'dress': 'üëó',
    'shoes': 'üëü',
    'accessory': 'üëú',
    'outerwear': 'üß•'
  }
  return icons[type] || 'üëï'
}

export function getClothingLabel(type: string): string {
  const labels: Record<string, string> = {
    'top': '√Åo',
    'bottom': 'Qu·∫ßn',
    'dress': 'V√°y/ƒê·∫ßm',
    'shoes': 'Gi√†y',
    'accessory': 'Ph·ª• ki·ªán',
    'outerwear': '√Åo kho√°c'
  }
  return labels[type] || 'Trang ph·ª•c'
}
